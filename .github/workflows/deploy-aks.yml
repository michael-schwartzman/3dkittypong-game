name: Continuous Deployment to AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: kittypongacr.azurecr.io
  REPOSITORY: 3dkittypong-game
  IMAGE_TAG: ${{ github.sha }}
  AKS_CLUSTER_NAME: games-multi-tenancy
  AKS_RESOURCE_GROUP: 3DKittyPongAKS

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
    - name: Set deployment variables
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "NAMESPACE=default" >> $GITHUB_ENV
          echo "APP_NAME=kittypong-game" >> $GITHUB_ENV
          echo "INGRESS_HOST=" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "NAMESPACE=pr-${{ github.event.number || 'staging' }}" >> $GITHUB_ENV
          echo "APP_NAME=kittypong-game-pr-${{ github.event.number || 'staging' }}" >> $GITHUB_ENV
          echo "INGRESS_HOST=pr-${{ github.event.number || 'staging' }}.kittypong.local" >> $GITHUB_ENV
        fi
        echo "Deploying to: $ENVIRONMENT"
        echo "Namespace: $NAMESPACE"
        echo "App name: $APP_NAME"
    
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${REGISTRY%%.*}
    
    - name: Build and push Docker image
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker build -t $REGISTRY/$REPOSITORY:latest .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:latest
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME
    
    - name: Install nginx ingress controller
      run: |
        # Add nginx ingress helm repo
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        
        # Install nginx ingress controller (only if not already installed)
        if ! helm list -n ingress-nginx | grep -q ingress-nginx; then
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --create-namespace \
            --namespace ingress-nginx \
            --set controller.service.type=LoadBalancer \
            --wait --timeout=300s
        else
          echo "nginx ingress controller already installed"
        fi
    
    - name: Create namespace
      run: |
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy to AKS
      run: |
        # Create temporary deployment files with environment-specific values
        export APP_NAME_ENV=$APP_NAME
        export NAMESPACE_ENV=$NAMESPACE
        
        # Update deployment with environment-specific values
        envsubst < k8s/deployment.yaml | \
        sed "s/name: kittypong-game/name: $APP_NAME/g" | \
        sed "s/app: kittypong-game/app: $APP_NAME/g" | \
        kubectl apply -n $NAMESPACE -f -
        
        # Update service with environment-specific values
        sed "s/name: kittypong-game-service/name: $APP_NAME-service/g" k8s/service.yaml | \
        sed "s/app: kittypong-game/app: $APP_NAME/g" | \
        kubectl apply -n $NAMESPACE -f -
        
        # Update configmap with environment-specific values
        sed "s/name: kittypong-game-config/name: $APP_NAME-config/g" k8s/configmap.yaml | \
        sed "s/app: kittypong-game/app: $APP_NAME/g" | \
        kubectl apply -n $NAMESPACE -f -
        
        # Update ingress with environment-specific values and paths
        if [ "$ENVIRONMENT" = "production" ]; then
          # Production uses root path
          sed "s/name: kittypong-game-ingress/name: $APP_NAME-ingress/g" k8s/ingress.yaml | \
          sed "s/app: kittypong-game/app: $APP_NAME/g" | \
          sed "s/name: kittypong-game-service/name: $APP_NAME-service/g" | \
          kubectl apply -n $NAMESPACE -f -
        else
          # Staging uses path-based routing to avoid conflicts
          sed "s/name: kittypong-game-ingress/name: $APP_NAME-ingress/g" k8s/ingress.yaml | \
          sed "s/app: kittypong-game/app: $APP_NAME/g" | \
          sed "s/name: kittypong-game-service/name: $APP_NAME-service/g" | \
          sed "s|path: /|path: /$NAMESPACE|g" | \
          sed "s|nginx.ingress.kubernetes.io/rewrite-target: /|nginx.ingress.kubernetes.io/rewrite-target: /|g" | \
          kubectl apply -n $NAMESPACE -f -
        fi
        
        # Wait for deployment to complete
        kubectl rollout status deployment/$APP_NAME -n $NAMESPACE --timeout=300s
    
    - name: Get deployment info
      run: |
        echo "=== Deployment Summary ==="
        echo "Environment: $ENVIRONMENT"
        echo "Namespace: $NAMESPACE"
        echo "App Name: $APP_NAME"
        echo "Image: $REGISTRY/$REPOSITORY:$IMAGE_TAG"
        echo ""
        echo "=== Ingress Controller ==="
        kubectl get service -n ingress-nginx ingress-nginx-controller
        echo ""
        echo "=== Application Status ==="
        kubectl get pods -n $NAMESPACE
        kubectl get service -n $NAMESPACE
        kubectl get ingress -n $NAMESPACE
        echo ""
        if [ "$ENVIRONMENT" = "production" ]; then
          INGRESS_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          DIRECT_IP=$(kubectl get service -n $NAMESPACE kittypong-game-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          echo "üéâ Production deployment complete!"
          echo "üîó Application URL (Ingress): http://$INGRESS_IP"
          echo "üîó Application URL (Direct): http://$DIRECT_IP"
          echo "üîí HTTPS URL (Ingress): https://$INGRESS_IP"
          echo "üìä Grafana Dashboard: https://kittypong-grafana-bfhzd4d7huhsargd.wus2.grafana.azure.com"
        else
          INGRESS_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          DIRECT_IP=$(kubectl get service -n $NAMESPACE kittypong-game-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          echo "üöÄ Staging deployment complete!"
          echo "üîó PR Preview URL (Ingress): http://$INGRESS_IP/$NAMESPACE"
          echo "üîó PR Preview URL (Direct): http://$DIRECT_IP"
          echo "üîí HTTPS Preview URL: https://$INGRESS_IP/$NAMESPACE"
          echo "üìù Namespace: $NAMESPACE"
          echo "üìã Path: /$NAMESPACE"
          echo "üìä Grafana Dashboard: https://kittypong-grafana-bfhzd4d7huhsargd.wus2.grafana.azure.com"
        fi